const fs = require('fs')
const path = require('path')
const { execSync } = require('child_process')
const { printWarning, printSuccess, printInfo, printAlert, startSpinner, stopSpinner } = require('./console-utils.js')
const inquirer = require('inquirer')
const prompt = inquirer.createPromptModule()

/**
 * Creates a directory with the specified name.
 * @param {string} dirName - The name of the directory to create.
 * @returns {string} The path of the created directory.
 */
function createDir(dirName) {
  const dir = path.join(process.cwd(), dirName)
  if (!dir) {
    printAlert('[-] Directory name is required')
    return
  }
  if (fs.existsSync(dir)) {
    printWarning(`[-] Directory ${dirName} already exists`)
    return
  }
  fs.mkdirSync(dir)
  printInfo(`[+] Directory ${dir} created`)
  return dir
}

/**
 * Pulls a template from a remote repository and sets up the project.
 * @param {string} directoryName - The name of the directory where the project will be created.
 * @param {string} applicationName - The name of the application.
 * @param {object} templateChoice - The template choice object containing the full name and default branch.
 * @throws {Error} If an invalid template is provided or an error occurs during the process.
 */
async function pullTemplate(directoryName, applicationName, templateChoice) {
  try {
    execSync(`npx create-project ${directoryName} --name="${applicationName}" ${templateChoice.full_name}#${templateChoice.default_branch}`)
    process.chdir(directoryName);
    if (fs.existsSync("package.json")) {
      const manager = await checkPackageManager()
      installDependencies(`${manager} install`, applicationName, directoryName)
    }
    if (fs.existsSync('{{name}}.csproj')) {
      fs.renameSync('{{name}}.csproj', `${applicationName}.csproj`)
      installDependencies('dotnet restore', applicationName, directoryName)
    }
    process.chdir('..')
  } catch (e) {
    throw new Error("[ERROR] Invalid Template" + e.message);
  }
}

async function checkPackageManager() {
  if (process.env.NODE_PACKAGE_MANGER) {
    return process.env.NODE_PACKAGE_MANGER
  }

  const answers = await prompt([{
    name: "package-manager",
    type: "rawlist",
    message: "Choose a package manager",
    choices: ['npm', 'yarn', 'pnpm'],
    loop: false
  }])
  process.env.NODE_PACKAGE_MANGER = answers['package-manager']
  return answers['package-manager']
}

function installDependencies(cmd, applicationName, dirName = '') {
  printInfo(`[+] Installing dependencies for ${applicationName} ${dirName}`)
  startSpinner()
  execSync(cmd)
  printSuccess(`[+] Dependencies installed for ${applicationName} ${dirName}`)
  stopSpinner()
}

/**
 * Creates a workspace based on the provided application object.
 * The workspace is created by generating a .code-workspace file with the specified folders.
 *
 * @param {object} application - The application object containing the templates and name.
 */
function createWorkspace(application) {
  if (!application) {
    application = { name: process.cwd().split(path.sep).pop() }
    printAlert('[-] Using current directory name as application name')
  }
  const workspace = addDirectoriesToWorkspace()

  if (fs.existsSync(`${application.name}.code-workspace`)) {
    const existingWorkspace = JSON.parse(fs.readFileSync(`${application.name}.code-workspace`, 'utf8'))
    workspace.folders = [...workspace.folders, ...existingWorkspace.folders]
    workspace.folders = workspace.folders.filter((folder, index, self) => index === self.findIndex((t) => (t.name === folder.name && t.path === folder.path)))
  }

  fs.writeFileSync(`${application.name}.code-workspace`, JSON.stringify(workspace, null, 2), "utf8")

  printSuccess(`[+] Workspace ${application.name}.code-workspace created`)
}

function addDirectoriesToWorkspace() {
  const workspace = {
    folders: [],
  }

  const directories = fs.readdirSync(process.cwd(), { withFileTypes: true })
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name);

  workspace.folders = directories.map(directory => ({
    name: directory,
    path: directory
  }));
  return workspace
}

exports.createDir = createDir
exports.pullTemplate = pullTemplate
exports.createWorkspace = createWorkspace

