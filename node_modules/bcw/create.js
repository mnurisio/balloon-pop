#!/usr/bin/env node
const inquirer = require('inquirer')
const prompt = inquirer.createPromptModule()
const path = require('path')
const { printWarning, printSuccess } = require("./utils/console-utils.js");
const { getRepos } = require('./utils/getRepos.js');
const { createDir, pullTemplate, createWorkspace } = require("./utils/create_utils.js");
let applicationName = ''
const args = process.argv.slice(2) || []
const templates = [];
const application = {
  name: '',
  templates: []
}

function validateName(input) {
  if (input == '.' || input == './') { return true }
  let message = ''
  if (input.length === 0) {
    message = "Name is required"
  }
  if (!/^[A-Za-z\-\_\d]+$/.test(input)) {
    message = "Name may only include letters, numbers, underscores and dashes."
  }
  return message ? message : true
}

async function createApplication() {
  const answers = await prompt([{
    name: "application-name",
    type: "input",
    message: "What is your Application Name?",
    validate: validateName,
  }])
  applicationName = answers["application-name"].toLowerCase();
  if (applicationName == '.' || applicationName == './') {
    applicationName = process.cwd().split(path.sep).pop()
    printWarning('[-] Using current directory as application name', applicationName)
  } else {
    createDir(applicationName)
    process.chdir(applicationName)
  }
  application.name = applicationName
  await addTemplate()
  await finalizeApplication()
}

async function addTemplate() {
  const choice = await prompt([
    {
      name: "template-choice",
      type: "rawlist",
      message: "What template would you like to add?",
      choices: [...templates, { name: 'Cancel' }],
      loop: false,
    }
  ])

  let templateName = choice["template-choice"];

  if (templateName == 'Cancel') {
    return
  }

  const answers = await prompt([{
    name: "directory-name",
    type: "input",
    message: "What would you like the Directory Name to be?",
    default: '.',
    validate: validateName
  }])

  let templateChoice = templates.find(t => t.name === templateName)
  let directoryName = answers["directory-name"].toLowerCase();
  await pullTemplate(directoryName, applicationName, templateChoice)
  application.templates.push({ directoryName, templateChoice })

  const addMore = await prompt([{
    name: "add-more",
    type: "confirm",
    message: "Would you like to add another template?"
  }])
  if (addMore["add-more"]) {
    return await addTemplate()
  }
}

async function finalizeApplication() {
  createWorkspace(application)
  printSuccess('Application Created')
}

async function start() {
  try {
    const repos = await getRepos(args.includes('--refresh'))
    templates.push(...repos.reduce((acc, repo) => repo.is_template ? [...acc, repo] : acc, []))
    templates.sort((a, b) => a.name.localeCompare(b.name))
    console.log(templates.length, 'templates')
  } catch (e) {
    console.error(e)
  }
  await createApplication()
}
start()


